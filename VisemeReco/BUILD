cc_binary(
    name = "simple",
    srcs = ["simple.cc"],
    data = glob([
        "resources/**/*",
        "graphs/simple.pbtxt",
    ]),
    deps = [
        "//mediapipe/calculators/audio:basic_time_series_calculators",
        "//mediapipe/calculators/audio:rational_factor_resample_calculator",
        "//mediapipe/calculators/core:add_header_calculator",
        "//mediapipe/framework:calculator_framework",
        "//mediapipe/framework/formats:image_frame",
        "//mediapipe/framework/formats:matrix",
        "//mediapipe/framework/formats:time_series_header_cc_proto",
        "//mediapipe/framework/port:commandlineflags",
        "//mediapipe/framework/port:file_helpers",
        "//mediapipe/framework/port:opencv_imgproc",
        "//mediapipe/framework/port:opencv_video",
        "//mediapipe/framework/port:parse_text_proto",
        "//mediapipe/framework/port:status",
        "//mediapipe/util:audio_decoder",
        "//mediapipe/util:audio_decoder_cc_proto",
        "//pixelshift/calculators/audio:audio_to_vowel_calculator",
        "//pixelshift/calculators/audio:loudness_metering_calculator",
        "//pixelshift/calculators/cubism:vowel_to_mouth_calculator",
        "//pixelshift/calculators/image:image_concating_calculator",
        "//pixelshift/calculators/util:series_data_visualization_calculator",
        "//pixelshift/util:one_euro_filter",
        "//pixelshift/util/cubism:avatar",
        "//third_party/raylib:GLES",
    ],
)


cc_binary(
    name = "specturm",
    srcs = ["compute_spec.cc"],
    data = glob([
        "resources/**/*",
        "graphs/specturm.pbtxt",
    ]),
    deps = [
        "//mediapipe/calculators/audio:spectrogram_calculator",
        "//mediapipe/calculators/audio:basic_time_series_calculators",
        "//mediapipe/calculators/audio:rational_factor_resample_calculator",
        "//mediapipe/calculators/core:add_header_calculator",
        "//mediapipe/framework:calculator_framework",
        "//mediapipe/framework/formats:image_frame",
        "//mediapipe/framework/formats:matrix",
        "//mediapipe/framework/formats:time_series_header_cc_proto",
        "//mediapipe/framework/port:commandlineflags",
        "//mediapipe/framework/port:file_helpers",
        "//mediapipe/framework/port:opencv_imgproc",
        "//mediapipe/framework/port:opencv_video",
        "//mediapipe/framework/port:parse_text_proto",
        "//mediapipe/framework/port:status",
        "//mediapipe/util:audio_decoder",
        "//mediapipe/util:audio_decoder_cc_proto",
        "//pixelshift/calculators/audio:audio_to_vowel_calculator",
        "//pixelshift/calculators/audio:loudness_metering_calculator",
        "//pixelshift/calculators/cubism:vowel_to_mouth_calculator",
        "//pixelshift/calculators/image:image_concating_calculator",
        "//pixelshift/calculators/util:series_data_visualization_calculator",
        "//pixelshift/util:one_euro_filter",
        "//pixelshift/util/cubism:avatar",
        "//third_party/raylib:GLES",
    ],
)

cc_binary(
    name = "mfcc",
    srcs = ["compute_mfcc.cc"],
    data = glob([
        "resources/**/*",
        "graphs/mel_mfcc.pbtxt",
    ]),
    deps = [
        "//mediapipe/calculators/audio:mfcc_mel_calculators",
        "//mediapipe/calculators/audio:spectrogram_calculator",
        "//mediapipe/calculators/audio:basic_time_series_calculators",
        "//mediapipe/calculators/audio:rational_factor_resample_calculator",
        "//mediapipe/calculators/core:add_header_calculator",
        "//mediapipe/framework:calculator_framework",
        "//mediapipe/framework/formats:image_frame",
        "//mediapipe/framework/formats:matrix",
        "//mediapipe/framework/formats:time_series_header_cc_proto",
        "//mediapipe/framework/port:commandlineflags",
        "//mediapipe/framework/port:file_helpers",
        "//mediapipe/framework/port:opencv_imgproc",
        "//mediapipe/framework/port:opencv_video",
        "//mediapipe/framework/port:parse_text_proto",
        "//mediapipe/framework/port:status",
        "//mediapipe/util:audio_decoder",
        "//mediapipe/util:audio_decoder_cc_proto",
        "//pixelshift/calculators/audio:audio_to_vowel_calculator",
        "//pixelshift/calculators/audio:loudness_metering_calculator",
        "//pixelshift/calculators/cubism:vowel_to_mouth_calculator",
        "//pixelshift/calculators/image:image_concating_calculator",
        "//pixelshift/calculators/util:series_data_visualization_calculator",
        "//pixelshift/util:one_euro_filter",
        "//pixelshift/util/cubism:avatar",
        "//third_party/raylib:GLES",
    ],
)

cc_binary(
    name = "full_simple",
    srcs = ["full_simple.cc"],
    data = glob([
        "resources/**/*",
        "graphs/full_simple.pbtxt",
    ]),
    deps = [
        "//experimental/zihualiu/apps/VisemeReco/calculators:svm_classifier_calculator",
        "//mediapipe/calculators/audio:mfcc_mel_calculators",
        "//mediapipe/calculators/audio:spectrogram_calculator",
        "//mediapipe/calculators/audio:basic_time_series_calculators",
        "//mediapipe/calculators/audio:rational_factor_resample_calculator",
        "//mediapipe/calculators/core:add_header_calculator",
        "//mediapipe/framework:calculator_framework",
        "//mediapipe/framework/formats:image_frame",
        "//mediapipe/framework/formats:matrix",
        "//mediapipe/framework/formats:time_series_header_cc_proto",
        "//mediapipe/framework/port:commandlineflags",
        "//mediapipe/framework/port:file_helpers",
        "//mediapipe/framework/port:opencv_imgproc",
        "//mediapipe/framework/port:opencv_video",
        "//mediapipe/framework/port:parse_text_proto",
        "//mediapipe/framework/port:status",
        "//mediapipe/util:audio_decoder",
        "//mediapipe/util:audio_decoder_cc_proto",
        "//pixelshift/calculators/audio:audio_to_vowel_calculator",
        "//pixelshift/calculators/audio:loudness_metering_calculator",
        "//pixelshift/calculators/cubism:vowel_to_mouth_calculator",
        "//pixelshift/calculators/image:image_concating_calculator",
        "//pixelshift/calculators/util:series_data_visualization_calculator",
        "//pixelshift/util:one_euro_filter",
        "//pixelshift/util/cubism:avatar",
        "//third_party/raylib:GLES",
    ],
)